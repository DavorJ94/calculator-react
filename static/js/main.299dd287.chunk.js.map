{"version":3,"sources":["App.js","utils/checkIfLastOperator.js","utils/checkIfLastTwoOperators.js","utils/refineForDisplay.js","utils/refineForEvaluation.js","index.js"],"names":["BUTTON_CLASSES","App","useState","currentElement","setCurrentElement","allElements","setAllElements","currentDisplay","setCurrentDisplay","shouldDisplayUpdate","setShouldDisplayUpdate","handleUserKeyPress","useCallback","event","pressedKey","key","indexOf","currentIndex","findIndex","x","document","querySelector","click","classList","add","setTimeout","remove","useEffect","window","addEventListener","removeEventListener","arrayElements","trim","split","length","refineForDisplay","manageInputNumber","input","clearState","includes","prevNumber","slice","concat","manageInputOperator","shouldReplace","checkIfLastTwoOperators","replaceOperator","checkIfLastOperator","equalFunc","expForEval","refineForEvaluation","solution","String","eval","decimalNumbers","join","className","replaceAll","map","item","isOperator","charAt","onClick","href","rel","target","replace","match","OPERATORS","allElementsArray","i","splice","isNaN","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.299dd287.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport checkIfLastOperator from \"./utils/checkIfLastOperator\";\nimport checkIfLastTwoOperators from \"./utils/checkIfLastTwoOperators\";\nimport refineForDisplay from \"./utils/refineForDisplay\";\nimport refineForEvaluation from \"./utils/refineForEvaluation\";\n\n// prettier-ignore\nconst BUTTON_CLASSES = [\"Escape\", \"\\\\/\", \"\\\\*\",  \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\\\\+\", \"\\\\-\", \"\\\\.\", \"Enter\"];\n\nfunction App() {\n  const [currentElement, setCurrentElement] = useState(\"0\");\n  const [allElements, setAllElements] = useState(\"\");\n  const [currentDisplay, setCurrentDisplay] = useState(\"\");\n  const [shouldDisplayUpdate, setShouldDisplayUpdate] = useState(true);\n\n  // ! For handling each keypress event\n  const handleUserKeyPress = useCallback((event) => {\n    const pressedKey = event.key;\n    if (\n      BUTTON_CLASSES.indexOf(pressedKey) !== -1 ||\n      BUTTON_CLASSES.indexOf(\"\\\\\" + pressedKey) !== -1\n    ) {\n      const currentIndex = BUTTON_CLASSES.findIndex(\n        (x) => x === pressedKey || x === \"\\\\\" + pressedKey\n      );\n      const currentElement = document.querySelector(\n        `.grid-item-${BUTTON_CLASSES[currentIndex]}`\n      );\n      currentElement.click();\n      currentElement.classList.add(\"buttonEventClass\");\n      setTimeout(function () {\n        currentElement.classList.remove(\"buttonEventClass\");\n      }, 100);\n    }\n  }, []);\n  // ! Adding and removing keydown event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleUserKeyPress);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyPress);\n    };\n  }, [handleUserKeyPress]);\n\n  useEffect(() => {\n    const arrayElements = allElements.trim().split(\" \");\n    if (arrayElements[arrayElements.length - 1] === \"\") setCurrentElement(\"0\");\n    else {\n      setCurrentElement(arrayElements[arrayElements.length - 1]);\n    }\n  }, [allElements]);\n\n  // ! Displaying values\n  useEffect(() => {\n    if (!shouldDisplayUpdate) return;\n    setCurrentDisplay(() => refineForDisplay(allElements));\n  }, [allElements, shouldDisplayUpdate]);\n\n  // ! Manage number inputs\n  const manageInputNumber = (input) => {\n    if (!shouldDisplayUpdate) clearState();\n    if (input === \".\" && currentElement.includes(\".\")) return;\n    if (input === \"0\" && currentElement === \"0\") return;\n    setAllElements((prevNumber) =>\n      (prevNumber.slice(-1) === \" \" || prevNumber.slice(-1) === \"\") &&\n      input === \".\"\n        ? prevNumber.concat(\"0\" + input)\n        : prevNumber.concat(input)\n    );\n\n    if (input === 0 && currentElement === \"0\") manageInputNumber(\".\");\n  };\n\n  // ! Manage operator inputs\n  const manageInputOperator = (input) => {\n    setShouldDisplayUpdate(true);\n    if (allElements === \"\" && input !== \"-\") return;\n    const shouldReplace = checkIfLastTwoOperators(allElements);\n    const replaceOperator = checkIfLastOperator(input, allElements);\n    if (input === \"-\") {\n      shouldReplace\n        ? setAllElements((prevNumber) =>\n            prevNumber.slice(0, -5).concat(\" \" + input + \" \")\n          )\n        : setAllElements((prevNumber) =>\n            prevNumber.trim().concat(\" \" + input + \" \")\n          );\n      return;\n    }\n    if (!replaceOperator)\n      setAllElements((prevNumber) => prevNumber.concat(\" \" + input + \" \"));\n    else if (shouldReplace) {\n      setAllElements((prevNumber) =>\n        prevNumber.slice(0, -5).concat(\" \" + input + \" \")\n      );\n    } else\n      setAllElements((prevNumber) =>\n        prevNumber.slice(0, -3).concat(\" \" + input + \" \")\n      );\n  };\n\n  // ! Clearing the state - \"AC\" button\n  const clearState = () => {\n    setShouldDisplayUpdate(true);\n    setAllElements(\"\");\n  };\n\n  // ! Getting the result from input\n  const equalFunc = () => {\n    if (!shouldDisplayUpdate) return;\n    if (!currentDisplay) return;\n    const expForEval = refineForEvaluation(currentDisplay);\n\n    // eslint-disable-next-line\n    let solution = String(eval(expForEval));\n    if (solution.includes(\".\")) {\n      let decimalNumbers = solution.split(\".\");\n      if (decimalNumbers[1].length > 4)\n        decimalNumbers[1] = decimalNumbers[1].slice(0, 4);\n      solution = decimalNumbers.join(\".\");\n    }\n    setShouldDisplayUpdate(false);\n    setCurrentDisplay(() => expForEval.concat(`=${solution}`));\n    setAllElements(solution);\n  };\n\n  return (\n    <div>\n      <div className=\"allElementWrapper\">\n        <div className=\"forDisplayingCurrentAllValues\">\n          <div className=\"allValuesDisplay\">\n            {\" \"}\n            {String(currentDisplay)\n              .replaceAll(\"*\", `\\u22C5`)\n              .replaceAll(\"/\", `\\u00f7`)}\n          </div>\n          <div className=\"currentValuesDisplay\">\n            {\" \"}\n            {String(currentElement)\n              .replaceAll(\"*\", `\\u22C5`)\n              .replaceAll(\"/\", `\\u00f7`)}\n          </div>\n        </div>\n\n        <div className=\"allButtons grid-container\">\n          {BUTTON_CLASSES.map((item) => {\n            let isOperator = false;\n            if (item.charAt(0) === \"\\\\\") {\n              isOperator = true;\n              item = item.slice(1);\n            }\n            return (\n              <button\n                className={`button grid-item-${item}`}\n                key={`key-${item}`}\n                onClick={\n                  item === \"Escape\"\n                    ? clearState\n                    : item === \"Enter\"\n                    ? equalFunc\n                    : item === \".\"\n                    ? () => manageInputNumber(\".\")\n                    : isOperator\n                    ? () => manageInputOperator(item)\n                    : () => manageInputNumber(item)\n                }\n              >\n                {item === \"Escape\"\n                  ? \"AC\"\n                  : item === \"Enter\"\n                  ? \"=\"\n                  : item === \"*\"\n                  ? `\\u00d7`\n                  : item === \"/\"\n                  ? `\\u00f7`\n                  : item}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n      <div>\n        <h1 className=\"designBy\">\n          Designed and coded by{\" \"}\n          <a\n            href=\"https://www.linkedin.com/in/davor-jovanovi%C4%87/\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            DavorJ\n          </a>\n        </h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default function checkIfLastOperator(input, allElements) {\r\n  const OPERATORS = [\"+\", \"-\", \"/\", \"*\"];\r\n  const arrayElements = allElements.trim().split(\" \");\r\n  return OPERATORS.includes(arrayElements[arrayElements.length - 1]);\r\n}\r\n","export default function checkIfLastTwoOperators(allElements) {\r\n  const arrayElements = allElements.trim();\r\n  const theVariable = arrayElements\r\n    .replace(/\\s/g, \"\")\r\n    .match(/([^\\d$\\s]{2})$/gm);\r\n  return theVariable ? true : false;\r\n}\r\n","export default function refineForDisplay(allElements) {\r\n  const OPERATORS = [\"+\", \"-\", \"/\", \"*\"];\r\n  const allElementsArray = allElements.trim().split(\" \");\r\n  for (let i = 0; i < allElementsArray.length; i++) {\r\n    if (\r\n      allElementsArray[i] === \"-\" &&\r\n      OPERATORS.includes(allElementsArray[i - 1])\r\n    ) {\r\n      allElementsArray.splice(i, 0, \"(\");\r\n    }\r\n    if (allElementsArray[i - 2] === \"(\") {\r\n      allElementsArray.splice(i + 1, 0, \")\");\r\n    }\r\n  }\r\n  return allElementsArray.join(\"\");\r\n}\r\n","export default function refineForEvaluation(expForEval) {\r\n  const shouldRemoveLastItems = expForEval.match(/([^\\d$\\s]{2})$/gm);\r\n  if (shouldRemoveLastItems) expForEval = expForEval.slice(0, -2);\r\n\r\n  if (isNaN(expForEval.slice(-1)) && expForEval.slice(-1) !== \")\")\r\n    expForEval = expForEval.slice(0, -1);\r\n  return expForEval;\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}